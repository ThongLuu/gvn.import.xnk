/* eslint-disable no-restricted-globals */

import { openDB } from 'idb';
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST || ["/pages/build-pc"]);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
// registerRoute(
//   // Return false to exempt requests from being fulfilled by index.html.
//   ({ request, url }) => {
//     // If this isn't a navigation, skip.
//     if (request.mode !== 'navigate') {
//       return false;
//     } // If this is a URL that starts with /_, skip.

//     if (url.pathname.startsWith('/_')) {
//       return false;
//     } // If this looks like a URL for a resource, because it contains // a file extension, skip.

//     if (url.pathname.match(fileExtensionRegexp)) {
//       return false;
//     } // Return true to signal that we want to use the handler.

//     return true;
//   },
//   // createHandlerBoundToURL(process.env.PUBLIC_URL + '/pages/build-pc')
//   // createHandlerBoundToURL('https://gearvn.com/pages/build-pc')
// );

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }

  if (event.data && event.data.type === 'CACHE_DATA') {
    cacheData(event.data.key, event.data.value);
  }
});

// Any other custom service worker logic can go here.

const CACHE_NAME = 'product';
const urlsToCache = [
  '/',
  // '/index.html',
  '/pages/build-pc',
  // '/static/js/bundle.js',
  // Add other URLs you want to cache
];


// Open IndexedDB
const dbPromise = openDB('build-pc', 1, {
  upgrade(db) {
    db.createObjectStore('products');
  },
});

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return cache.addAll(urlsToCache);
    })
  );
});

self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request).then((response) => {
      if (response) {
        return response;
      }

      return fetch(event.request).then((response) => {
        if (!response || response.status !== 200 || response.type !== 'basic') {
          return response;
        }

        const responseToCache = response.clone();

        caches.open(CACHE_NAME).then((cache) => {
          cache.put(event.request, responseToCache);
        });

        return response;
      });
    })
  );
});

self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'CACHE_DATA') {
    cacheData(event.data.key, event.data.value);
  }
});


export async function cacheData(key, value) {
  const db = await dbPromise;
  const tx = db.transaction('products', 'readwrite');
  const store = tx.objectStore('products');

  await store.put(value, key);
  await tx.done;
}

export async function getData(key) {
  const db = await dbPromise;
  return await db.get('products', key);
}

export async function getAll() {
  const db = await dbPromise;
  const tx = db.transaction('products', 'readonly');
  const store = tx.objectStore('products');
  return await store.getAll();
}

export async function deleteData(key) {
  const db = await dbPromise;
  const tx = db.transaction('products', 'readwrite');
  const store = tx.objectStore('products');
  console.log("ðŸš€ ~ deleteData ~ store:", store)

  await store.delete(key);
  await tx.done;
}

export async function deleteAll() {
  const db = await dbPromise;
  const tx = db.transaction('products', 'readwrite');
  const store = tx.objectStore('products');

  await store.clear();
  await tx.done;
}

export async function updateProperty(key, property, value) {
  const db = await dbPromise;
  const tx = db.transaction('products', 'readwrite');
  const store = tx.objectStore('products');

  const existingObject = await store.get(key);

  if (!existingObject) {
    console.error(`No object found with key '${key}'.`);
    return;
  }

  existingObject[property] = value;

  await store.put(existingObject, key);
  await tx.done;
}


